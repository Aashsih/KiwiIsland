package nz.ac.aut.ense701.gui;

import java.awt.Color;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import nz.ac.aut.ense701.gamemodel.Game;
import nz.ac.aut.ense701.gamemodel.Position;

/*
 * Panel for representing a single GridSquare of the island on the GUI.
 * 
 * @author AS
 * @version 1.0 - created
 */

@SuppressWarnings("serial")
public class GridSquarePanel extends javax.swing.JPanel 
{
    private static final Border NORMAL_BORDER = new LineBorder(Color.BLACK, 1);
    private static final Border ACTIVE_BORDER = new LineBorder(Color.RED, 3);
    
    private final Game game;
    private final int row;
    private final int column;
    /** 
     * Creates new GridSquarePanel.
     * @param game the game to represent
     * @param row the row to represent
     * @param column the column to represent
     */
    public GridSquarePanel(Game game, int row, int column)
    {
        this.game   = game;
        this.row    = row;
        this.column = column;
        initComponents();
    }

    /**
     * Updates the representation of the grid square panel.
     */
    public void update()
    {
        // get the GridSquare object from the world
        boolean squareVisible = game.isVisible(row, column);
        boolean squareExplored = game.isExplored(row, column);
        lblText.setOpaque(false);
        lblText.setBackground(null);
        
        if ( squareExplored || squareVisible )
        {
            // Set the text of the JLabel according to the occupant
            lblText.setText(game.getOccupantStringRepresentation(row,column));
            
            // set border colour according to 
            // whether the player is in the grid square or not
            setBorder(game.hasPlayer(row,column) ? ACTIVE_BORDER : NORMAL_BORDER);
        }
        else
        {
            lblText.setText("");
            setBorder(NORMAL_BORDER);
        }
        if(game.getLastUpdatedPredatorPosition() != null){
            Position lastUpdatedPredatorPosition = game.getLastUpdatedPredatorPosition();
            if(this.row == lastUpdatedPredatorPosition.getRow() && this.column == lastUpdatedPredatorPosition.getColumn()){
                lblText.setOpaque(true);
                lblText.setBackground(Color.ORANGE);
                game.removeLastUpdatedPredatorPosition();
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblText = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        lblText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblText.setText("content");
        add(lblText, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblText;
    // End of variables declaration//GEN-END:variables
    
}
