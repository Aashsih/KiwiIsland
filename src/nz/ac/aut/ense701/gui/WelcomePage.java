/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.aut.ense701.gui;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import nz.ac.aut.ense701.gamemodel.Game;
import nz.ac.aut.ense701.gamemodel.Score;
import nz.ac.aut.ense701.gamemodel.ScoreBoard;
import nz.ac.aut.ense701.gamemodel.StringUtil;
import nz.ac.aut.ense701.images.ImageFilePathConstants;

/**
 *
 * @author aashi
 */
@SuppressWarnings("serial")
public class WelcomePage extends javax.swing.JFrame {
    
    private transient BufferedImage image;
    
    private String playerName;
    
    /**
     * Creates new form WelcomePage
     */
    public WelcomePage() {
        initComponents();
        initializeScoreBoard();
        pnlWelcomePage.repaint();
        loadIslandMap();
    }

    /**
     * Starts the KiwiIsland game
     */
    public void startNewGame(){
        // create the game object
        final Game game = new Game(playerName);
        // create the GUI for the game
        final KiwiCountUI  gui  = new KiwiCountUI(game, this); 
        
        // make the GUI visible
        java.awt.EventQueue.invokeLater(() -> {
            gui.setVisible(true);
            gui.setFocusable(true);
            gui.requestFocus();
            WelcomePage.this.setVisible(false);
        });
    }
  
    /**
     * Initializes the JList with player score
     */
    @SuppressWarnings("unchecked")
    public final void initializeScoreBoard(){
        try {
            List<Score> playerScores = ScoreBoard.getScoreBoard();
            if(playerScores != null){
                Collections.sort(playerScores, (Score o1, Score o2) -> o2.getScore() - o1.getScore());
                DefaultListModel<String> listModel = new DefaultListModel<>();
                for(int i = 0; i < playerScores.size(); i++){
                    listModel.addElement((i + 1) + ". " + playerScores.get(i).toString());
                }
                scoreList.setModel(listModel);
            }
            else{
                scoreList.setModel(new DefaultListModel<>());
            }
        } catch (IOException ex) {
            Logger.getLogger(WelcomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Displays a dialog box to select a player name
     */
    private void displaySelectPlayerNameDialogBox(){
        JTextField txtPlayername = new JTextField();
        final JComponent[] inputs = new JComponent[] {
                new JLabel("User Name"),
                txtPlayername
            };
        boolean playerNameAccepted = false;
        do{
            int result = JOptionPane.showConfirmDialog(this, inputs, "Please enter your player name", JOptionPane.PLAIN_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {
                playerNameAccepted = StringUtil.isAlphaNumeric(txtPlayername.getText());
                 //Check if player name is accepted
                if(playerNameAccepted){
                    playerName = txtPlayername.getText();
                }
                else{
                    playerName = null;
                    JOptionPane.showMessageDialog(this, "Please enter an alphanumeric username", "", JOptionPane.INFORMATION_MESSAGE);
                    txtPlayername.setText("");
                }
            }
            else if(result == JOptionPane.CLOSED_OPTION){
                playerName = null;
                break;
            }
        }while(!playerNameAccepted);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomePageSplitPane = new javax.swing.JSplitPane();
        pnlScoreBoard = new javax.swing.JPanel();
        lblScoreBoard = new javax.swing.JLabel();
        jScrollPaneScoreBoard = new javax.swing.JScrollPane();
        scoreList = new javax.swing.JList<String>();
        pnlWelcomePage = new javax.swing.JPanel(){
            private Integer pnlWidth;
            private Integer pnlHeight;
            private transient Image scaledImage;
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if(pnlWidth == null || pnlHeight == null){
                    pnlWidth = this.getWidth();
                    pnlHeight = this.getHeight();
                }
                if(image != null){
                    if(this.getWidth() != pnlWidth || this.getHeight() != pnlHeight){
                        pnlWidth = this.getWidth();
                        pnlHeight = this.getHeight();
                        scaledImage = image.getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_SMOOTH);
                    }
                    if(scaledImage == null){
                        scaledImage = image.getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_SMOOTH);
                    }
                    g.drawImage(scaledImage, 0, 0, null);
                }
            }

        };
        pnlButtons = new javax.swing.JPanel();
        btnNewGame = new javax.swing.JButton();
        btnSelectPlayerName = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(235, 500));
        setPreferredSize(new java.awt.Dimension(833, 612));

        welcomePageSplitPane.setDividerLocation(0.5);

        pnlScoreBoard.setLayout(new java.awt.BorderLayout());

        lblScoreBoard.setText("Score Board");
        pnlScoreBoard.add(lblScoreBoard, java.awt.BorderLayout.NORTH);

        scoreList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneScoreBoard.setViewportView(scoreList);

        pnlScoreBoard.add(jScrollPaneScoreBoard, java.awt.BorderLayout.CENTER);

        welcomePageSplitPane.setLeftComponent(pnlScoreBoard);
        pnlScoreBoard.getAccessibleContext().setAccessibleParent(welcomePageSplitPane);

        pnlWelcomePage.setLayout(new java.awt.BorderLayout());

        pnlButtons.setOpaque(false);

        btnNewGame.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnNewGame.setText("New Game");
        btnNewGame.setBorderPainted(false);
        btnNewGame.setContentAreaFilled(false);
        btnNewGame.setOpaque(false);
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNewGame);

        btnSelectPlayerName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnSelectPlayerName.setText("Select Player Name");
        btnSelectPlayerName.setBorderPainted(false);
        btnSelectPlayerName.setContentAreaFilled(false);
        btnSelectPlayerName.setOpaque(false);
        btnSelectPlayerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPlayerNameActionPerformed(evt);
            }
        });
        pnlButtons.add(btnSelectPlayerName);

        pnlWelcomePage.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        welcomePageSplitPane.setRightComponent(pnlWelcomePage);

        getContentPane().add(welcomePageSplitPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed
        startNewGame();
    }//GEN-LAST:event_btnNewGameActionPerformed

    private void btnSelectPlayerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPlayerNameActionPerformed
        displaySelectPlayerNameDialogBox();
    }//GEN-LAST:event_btnSelectPlayerNameActionPerformed

    
    /**
     * Reads the Image file for the island 
     */
    private void loadIslandMap(){
        try{
            image = ImageIO.read(WelcomePage.class.getResourceAsStream(ImageFilePathConstants.WELCOME_PAGE));
            //image = ImageIO.read(new File(WelcomePage.class.getResource(ImageFilePathConstants.WELCOME_PAGE).getFile()));
        }catch(IOException e){
            Logger.getLogger(KiwiCountUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewGame;
    private javax.swing.JButton btnSelectPlayerName;
    private javax.swing.JScrollPane jScrollPaneScoreBoard;
    private javax.swing.JLabel lblScoreBoard;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlScoreBoard;
    private javax.swing.JPanel pnlWelcomePage;
    private javax.swing.JList<String> scoreList;
    private javax.swing.JSplitPane welcomePageSplitPane;
    // End of variables declaration//GEN-END:variables
}
